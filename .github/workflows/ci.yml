name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint:check
    
    - name: Run unit tests
      run: npm test
    
    - name: Run integration tests  
      run: npm run test:integration
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Build extension
      run: npm run build
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 7
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage/lcov.info
        flags: unittests

  extension-validation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate manifest
      run: npm run validate:manifest
    
    - name: Check permissions
      run: npm run validate:permissions
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Package extension
      run: npm run package
    
    - name: Upload extension package
      uses: actions/upload-artifact@v4
      with:
        name: extension-package
        path: dist/session-guardian.zip
        retention-days: 30

  browser-tests:
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        browser: [chrome, firefox]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install browser dependencies
      run: |
        npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Run browser tests
      run: npm run test:${{ matrix.browser }}
    
    - name: Upload test screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-screenshots-${{ matrix.browser }}
        path: test-results/screenshots/
        retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: [test, extension-validation, browser-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build and package
      run: npm run build:production
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Upload to Chrome Web Store
      if: startsWith(github.ref, 'refs/tags/')
      env:
        CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        APP_ID: ${{ secrets.CHROME_APP_ID }}
      run: npm run deploy:chrome
