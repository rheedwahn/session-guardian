name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint:check
    
    - name: Validate manifest
      run: npm run validate:manifest
    
    - name: Validate permissions
      run: npm run validate:permissions
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Run integration tests
      run: npm run test:integration
    
    - name: Check test coverage
      run: npm run test:coverage
    
    - name: Build extension
      run: npm run build
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME\|XXX" --include="*.js" --include="*.html" --include="*.css" .; then
          echo "‚ö†Ô∏è Found TODO/FIXME comments in code"
          exit 1
        fi
    
    - name: Validate file sizes
      run: |
        find . -name "*.js" -size +100k -exec echo "‚ö†Ô∏è Large JavaScript file: {}" \;
        find . -name "*.png" -size +500k -exec echo "‚ö†Ô∏è Large image file: {}" \;
    
    - name: Comment PR with test results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo, number } = context.issue;
          const workflow = context.workflow;
          const runId = context.runId;
          
          const comment = `
          ## ü§ñ Automated PR Validation
          
          **Workflow:** ${workflow}
          **Run ID:** ${runId}
          **Status:** ${{ job.status }}
          
          ### Results Summary
          - ‚úÖ Linting
          - ‚úÖ Manifest validation
          - ‚úÖ Permission validation
          - ‚úÖ Unit tests
          - ‚úÖ Integration tests
          - ‚úÖ Build validation
          - ‚úÖ Security audit
          
          [View full results](https://github.com/${owner}/${repo}/actions/runs/${runId})
          `;
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body: comment
          });

  size-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check extension size
      run: |
        echo "üìè Extension Size Check"
        echo "====================="
        
        # Check total size
        total_size=$(du -sh . | cut -f1)
        echo "Total project size: $total_size"
        
        # Check individual file sizes
        echo -e "\nüìÅ Largest files:"
        find . -type f -not -path './node_modules/*' -not -path './.git/*' | xargs ls -la | sort -k5 -nr | head -10
        
        # Check if extension would be under Chrome Web Store limits
        zip_size=$(zip -r temp.zip . -x "node_modules/*" ".git/*" "tests/*" "*.zip" | tail -1 | grep -o '[0-9]*' | tail -1)
        if [ "$zip_size" -gt 134217728 ]; then  # 128MB limit
          echo "‚ùå Extension package would exceed Chrome Web Store size limit"
          exit 1
        fi
        
        echo "‚úÖ Extension size is within limits"
